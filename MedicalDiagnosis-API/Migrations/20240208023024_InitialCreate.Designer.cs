// <auto-generated />
using System;
using MedicalDiagnosis_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalDiagnosis_API.Migrations
{
    [DbContext(typeof(MedicalDiagnosisContext))]
    [Migration("20240208023024_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Comment", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentAuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentCommentCommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentAuthorId");

                    b.HasIndex("ParentCommentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Consultation", b =>
                {
                    b.Property<string>("ConsultationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalInspectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalInspectionsMedicalInspectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConsultationId");

                    b.HasIndex("MedicalInspectionId");

                    b.HasIndex("MedicalInspectionsMedicalInspectionId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Diagnoses", b =>
                {
                    b.Property<string>("DiagnosesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalInspectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("DiagnosesId");

                    b.HasIndex("MedicalInspectionId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Doctor", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialityId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DoctorId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.MedicalInspection", b =>
                {
                    b.Property<string>("MedicalInspectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Complaints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Conclusion")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InspectionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalInspectionId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("NextVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentInspectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Recommendations")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalInspectionId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MedicalInspectionId1");

                    b.HasIndex("ParentInspectionId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalInspections", t =>
                        {
                            t.HasCheckConstraint("CK_MedicalInspection_Conclusion_DeathDate", "([Conclusion] = 'Death' AND [DeathDate] IS NOT NULL) OR ([Conclusion] <> 'Death')");

                            t.HasCheckConstraint("CK_MedicalInspection_Conclusion_NextVisit", "([Conclusion] = 'Disease' AND [NextVisitDate] IS NOT NULL) OR ([Conclusion] <> 'Disease')");

                            t.HasCheckConstraint("CK_MedicalInspection_MainDiagnosis", "SELECT COUNT(*) FROM Diagnoses WHERE TypeInInspection = 'Main' AND MedicalInspectionId = Id GROUP BY MedicalInspectionId HAVING COUNT(*) = 1");
                        });
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.MedicalInspectionDiagnosis", b =>
                {
                    b.Property<string>("MedicalInspectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiagnosesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalInspectionDiagnosisId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalInspectionId", "DiagnosesId");

                    b.HasIndex("DiagnosesId");

                    b.ToTable("MedicalInspectionDiagnosis");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Speciality", b =>
                {
                    b.Property<string>("SpecialityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialityId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Comment", b =>
                {
                    b.HasOne("MedicalDiagnosis_API.Models.Doctor", "CommentAuthor")
                        .WithMany("Comments")
                        .HasForeignKey("CommentAuthorId");

                    b.HasOne("MedicalDiagnosis_API.Models.Comment", "ParentComment")
                        .WithMany("InnerComments")
                        .HasForeignKey("ParentCommentCommentId");

                    b.Navigation("CommentAuthor");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Consultation", b =>
                {
                    b.HasOne("MedicalDiagnosis_API.Models.MedicalInspection", "MedicalInspection")
                        .WithMany("Consultations")
                        .HasForeignKey("MedicalInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalDiagnosis_API.Models.MedicalInspection", "MedicalInspections")
                        .WithMany()
                        .HasForeignKey("MedicalInspectionsMedicalInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalInspection");

                    b.Navigation("MedicalInspections");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Diagnoses", b =>
                {
                    b.HasOne("MedicalDiagnosis_API.Models.MedicalInspection", "MedicalInspection")
                        .WithMany()
                        .HasForeignKey("MedicalInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalInspection");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Doctor", b =>
                {
                    b.HasOne("MedicalDiagnosis_API.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.MedicalInspection", b =>
                {
                    b.HasOne("MedicalDiagnosis_API.Models.Doctor", "Author")
                        .WithMany("MedicalInspections")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalDiagnosis_API.Models.MedicalInspection", null)
                        .WithMany("ChildInspections")
                        .HasForeignKey("MedicalInspectionId1");

                    b.HasOne("MedicalDiagnosis_API.Models.MedicalInspection", "ParentInspection")
                        .WithMany()
                        .HasForeignKey("ParentInspectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalDiagnosis_API.Models.Patient", "Patient")
                        .WithMany("MedicalInspections")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ParentInspection");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.MedicalInspectionDiagnosis", b =>
                {
                    b.HasOne("MedicalDiagnosis_API.Models.Diagnoses", "Diagnoses")
                        .WithMany("MedicalInspectionDiagnoses")
                        .HasForeignKey("DiagnosesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalDiagnosis_API.Models.MedicalInspection", "MedicalInspection")
                        .WithMany("MedicalInspectionDiagnoses")
                        .HasForeignKey("MedicalInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnoses");

                    b.Navigation("MedicalInspection");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Comment", b =>
                {
                    b.Navigation("InnerComments");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Diagnoses", b =>
                {
                    b.Navigation("MedicalInspectionDiagnoses");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Doctor", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MedicalInspections");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.MedicalInspection", b =>
                {
                    b.Navigation("ChildInspections");

                    b.Navigation("Consultations");

                    b.Navigation("MedicalInspectionDiagnoses");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.Patient", b =>
                {
                    b.Navigation("MedicalInspections");
                });
#pragma warning restore 612, 618
        }
    }
}
