// <auto-generated />
using System;
using MedicalDiagnosis_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalDiagnosis_API.Migrations
{
    [DbContext(typeof(MedicalDiagnosisContext))]
    partial class MedicalDiagnosisContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ConsultationModelInspectionModel", b =>
                {
                    b.Property<Guid>("ConsultationsConsultationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("InspectionsId")
                        .HasColumnType("char(36)");

                    b.HasKey("ConsultationsConsultationId", "InspectionsId");

                    b.HasIndex("InspectionsId");

                    b.ToTable("ConsultationInspection", (string)null);
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.CommentModel", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ConsultationModelConsultationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("char(36)");

                    b.HasKey("CommentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConsultationModelConsultationId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.ConsultationModel", b =>
                {
                    b.Property<Guid>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("char(36)");

                    b.HasKey("ConsultationId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.DiagnosisModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("InspectionModelId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("InspectionModelId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.DoctorModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.InspectionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Anamnesis")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("BaseInspectionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Complaints")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("NextVisitDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PreviousInspectionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.PatientModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.SpecialityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("ConsultationModelInspectionModel", b =>
                {
                    b.HasOne("MedicalDiagnosis_API.Models.ConsultationModel", null)
                        .WithMany()
                        .HasForeignKey("ConsultationsConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalDiagnosis_API.Models.InspectionModel", null)
                        .WithMany()
                        .HasForeignKey("InspectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.CommentModel", b =>
                {
                    b.HasOne("MedicalDiagnosis_API.Models.DoctorModel", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MedicalDiagnosis_API.Models.ConsultationModel", null)
                        .WithMany("Comments")
                        .HasForeignKey("ConsultationModelConsultationId");

                    b.HasOne("MedicalDiagnosis_API.Models.CommentModel", "ParentComment")
                        .WithMany("InnerComments")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.ConsultationModel", b =>
                {
                    b.HasOne("MedicalDiagnosis_API.Models.SpecialityModel", "Speciality")
                        .WithMany("Consultations")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.DiagnosisModel", b =>
                {
                    b.HasOne("MedicalDiagnosis_API.Models.InspectionModel", "Inspection")
                        .WithMany("Diagnoses")
                        .HasForeignKey("InspectionModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.InspectionModel", b =>
                {
                    b.HasOne("MedicalDiagnosis_API.Models.DoctorModel", "Doctor")
                        .WithMany("Inspections")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalDiagnosis_API.Models.PatientModel", "Patient")
                        .WithMany("Inspections")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.CommentModel", b =>
                {
                    b.Navigation("InnerComments");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.ConsultationModel", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.DoctorModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.InspectionModel", b =>
                {
                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.PatientModel", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("MedicalDiagnosis_API.Models.SpecialityModel", b =>
                {
                    b.Navigation("Consultations");
                });
#pragma warning restore 612, 618
        }
    }
}
